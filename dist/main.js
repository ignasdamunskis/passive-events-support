(()=>{"use strict";function e(e=!1){let t=!1;try{const e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("testPassive",null,e),window.removeEventListener("testPassive",null,e)}catch(e){}if(e){const e=`[Passive Events Support] "passive" option is ${t?"":"not "}supported by your browser.`;t?console.info(e):console.warn(e)}return t}window.passiveSupport||={},window.passiveSupported=e(window.passiveSupport.debug),function(t){const n={events:["scroll","wheel","touchstart","touchmove","touchenter","touchend","touchleave","mouseout","mouseleave","mouseup","mousedown","mousemove","mouseenter","mousewheel","mouseover"],preventedListeners:[],debug:!1,...window.passiveSupport};n.debug&&console.info("[Passive Events Support] Initialized",n);const{events:s,preventedListeners:o,debug:i}=n,r=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(...t){const n=t[2];if(s.includes(t[0])&&(!t[2]||void 0===t[2].passive)){const s=t[1].toString(),[r,...u]=s.split("{"),p=r.replace(/(function|=>)/,"").trim(),v=u.join("{"),d=(p.match(/\(([^)]+)\)/)||[`(${p})`])[0].replace(/[()]/g,""),a=!(!o.find((({element:e,event:n})=>this.matches(e)&&n===t[0]))&&!v.includes("preventDefault"));t[2]={...t[2]||{},...e()&&{passive:!a}},i&&console.info("[Passive Events Support] Updated Event Listeners",{element:this,event:t[0],handler:{fn:t[1],fnArgument:d,fnContent:v,fnPrevented:a},oldArguments:n,updatedArguments:t[2]})}r.call(this,...t)}}()})();