(()=>{"use strict";function e(e=!1){let t=!1;try{const e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("testPassive",null,e),window.removeEventListener("testPassive",null,e)}catch(e){}if(e){const e=`[Passive Events Support] "passive" option is ${t?"":"not "}supported by your browser.`;t?console.info(e):console.warn(e)}return t}function t(e){return["scroll","wheel","touchstart","touchmove","touchenter","touchend","touchleave","mouseout","mouseleave","mouseup","mousedown","mousemove","mouseenter","mousewheel","mouseover"].includes(e)}window.passiveSupport||={},window.passiveSupported=e(window.passiveSupport.debug),function(n){const s={debug:!1,events:[],listeners:[],...window.passiveSupport};s.debug&&(console.info("[Passive Events Support] Initialized With",s),s.events=s.events.filter((e=>{const n=t(e);return n||console.warn(`[Passive Events Support] Unsupported Event: ${e}`),n})),s.listeners=s.listeners.filter((e=>{const n=t(e.event);return n||console.warn("[Passive Events Support] Unsupported Listener:",e),n})));const{debug:o,events:i,listeners:r}=s,u=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(...t){const n=t[2],s=i.includes(t[0]),p=r.find((({element:e,event:n})=>"function"==typeof this.matches&&this.matches(e)&&n===t[0])),v=!t[2]||void 0===t[2].passive;if((s||p)&&v){const s=t[1].toString(),[i,...r]=s.split("{"),u=i.replace(/(function|=>)/,"").trim(),v=r.join("{"),c=(u.match(/\(([^)]+)\)/)||[`(${u})`])[0].replace(/[()]/g,""),a=v.includes("preventDefault")||p&&p.prevented;t[2]={...t[2]||{},...e()&&{passive:!a}},o&&console.info("[Passive Events Support] Updated Event Listeners",{element:this,event:t[0],handler:{fn:t[1],fnArgument:c,fnContent:v,fnPrevented:a},oldArguments:n,updatedArguments:t[2]})}u.call(this,...t)}}()})();