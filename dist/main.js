(()=>{"use strict";function e(e=!1){let t=!1;try{const e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("testPassive",null,e),window.removeEventListener("testPassive",null,e)}catch(e){}if(e){const e=`[Passive Events Support] "passive" option is ${t?"":"not "}supported by your browser.`;t?console.info(e):console.warn(e)}return t}function t(e){return["scroll","wheel","touchstart","touchmove","touchenter","touchend","touchleave","mouseout","mouseleave","mouseup","mousedown","mousemove","mouseenter","mousewheel","mouseover"].includes(e)}window.passiveSupport||={},window.passiveSupported=e(window.passiveSupport.debug),function(n){const s={debug:!1,events:[],listeners:[],...window.passiveSupport};s.debug&&(console.info("[Passive Events Support] Initialized With",s),s.events=s.events.filter((e=>{const n=t(e);return n||console.warn(`[Passive Events Support] Unsupported Event: ${e}`),n})),s.listeners=s.listeners.filter((e=>{const n=t(e.event);return n||console.warn("[Passive Events Support] Unsupported Listener:",e),n})));const{debug:o,events:i,listeners:r}=s,u=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(...n){const s=!n[2]||void 0===n[2].passive;if(t(n[0])&&s){const t=n[1].toString(),[s,...u]=t.split("{"),p=s.replace(/(function|=>)/,"").trim(),v=u.join("{"),c=(p.match(/\(([^)]+)\)/)||[`(${p})`])[0].replace(/[()]/g,""),a=v.includes("preventDefault")||f&&f.prevented,l=n[2],d=i.includes(n[0]),f=r.find((({element:e,event:t})=>"function"==typeof this.matches&&this.matches(e)&&t===n[0])),m=d||f;m&&(n[2]={...n[2]||{},...e()&&{passive:!a}}),o&&console.info("[Passive Events Support] Non-passive Event Listener",{element:this,event:n[0],handler:{fn:n[1],fnArgument:c,fnContent:v,fnPrevented:a},arguments:l,...m&&{updatedArguments:n[2]}})}u.call(this,...n)}}()})();