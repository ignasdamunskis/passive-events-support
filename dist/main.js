(()=>{"use strict";function e(e=!1){let t=!1;try{const e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("testPassive",null,e),window.removeEventListener("testPassive",null,e)}catch(e){}if(e){const e=`[Passive Events Support] "passive" option is ${t?"":"not "}supported by your browser.`;t?console.info(e):console.warn(e)}return t}window.passiveSupported=e(),function(t=null,n=!1){const s=t||["scroll","wheel","touchstart","touchmove","touchenter","touchend","touchleave","mouseout","mouseleave","mouseup","mousedown","mousemove","mouseenter","mousewheel","mouseover"],o=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(...t){const i=t[2];if(s.includes(t[0])&&(!t[2]||void 0===t[2].passive)){const s=t[1].toString(),[o,...u]=s.split("{"),r=o.replace(/(function|=>)/,"").trim(),c=u.join("{"),l=(r.match(/\(([^)]+)\)/)||[`(${r})`])[0].replace(/[()]/g,""),d=!(!l||!(c.includes("preventDefault")||c.includes(`(${l})`)||c.includes(`(${l},`)||c.includes(`,${l})`)||c.includes(`, ${l})`)||c.includes(`,${l},`)||c.includes(`, ${l},`)));t[2]={...t[2]||{},...e()&&{passive:!d}},n&&console.info("[Passive Events Support] Updated Event Listeners",{element:this,event:t[0],handler:{fnArgument:l,fnContent:c,fnPrevented:d},oldArguments:i,updatedArguments:t[2]})}o.call(this,...t)}}(window.passiveEvents)})();