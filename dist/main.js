(()=>{"use strict";function e(e=!1){let t=!1;try{const e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("testPassive",null,e),window.removeEventListener("testPassive",null,e)}catch(e){}if(e){const e=`[Passive Events Support] "passive" option is ${t?"":"not "}supported by your browser.`;t?console.info(e):console.warn(e)}return t}function t(e){return["touchstart","touchmove","touchenter","touchend","touchleave","wheel","mousewheel"].includes(e)}window.passiveSupport||={},window.passiveSupported=e(window.passiveSupport.debug),function(n){const s={debug:!1,events:[],listeners:[],...window.passiveSupport};s.debug&&(console.info("[Passive Events Support] Initialized With",s),s.events=s.events.filter((e=>{const n=t(e);return n||console.warn(`[Passive Events Support] Unsupported Event: ${e}`),n})),s.listeners=s.listeners.filter((e=>{const n=t(e.event);return n||console.warn("[Passive Events Support] Unsupported Listener:",e),n})));const{debug:o,events:i,listeners:r}=s,p=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(...n){const s=!n[2]||void 0===n[2].passive;if(t(n[0])&&s){const t=n[2],s=i.includes(n[0]),p=r.find((({element:e,event:t})=>"function"==typeof this.matches&&this.matches(e)&&t===n[0])),u=s||p,v=n[1].toString(),[c,...a]=v.split("{"),d=c.replace(/(function|=>)/,"").trim(),l=a.join("{"),f=(d.match(/\(([^)]+)\)/)||[`(${d})`])[0].replace(/[()]/g,""),w=!!(l.includes("preventDefault")||p&&p.prevented);u&&(n[2]={...n[2]||{},...e()&&{passive:!w}}),o&&console.info("[Passive Events Support] Non-passive Event Listener",{element:this,event:n[0],handler:{fn:n[1],fnArgument:f,fnContent:l,fnPrevented:w},arguments:t,...u&&{updatedArguments:n[2]}})}p.call(this,...n)}}()})();